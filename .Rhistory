lapply(list.rbind) %>% list.rbind %>%
gcj02_wgs84_matrix_df %>%
bind_cols(admin_city)
#
admin_city<-get_location('南京')[['districts']] %>% "["('districts') %>% '[['(1) %>% '[['(1)
admin_city<-lapply(admin_city$adcode,get_location)  %>%list.map(districts) %>% lapply(select,-districts) %>% list.rbind
admin_city$polyline<-js_city$polyline %>% str_split('\\|') %>% lapply(str_split,';') %>% lapply(lapply,str_split,',') %>%
lapply(lapply,lapply,as.numeric) %>% lapply(lapply, list.rbind) %>%
lapply(lapply,gcj02_wgs84_matrix_matrix) %>% lapply(lapply,list) %>%
lapply(st_multipolygon) %>%st_sfc(crs=4326)
admin_city       <-admin_city$center %>%
str_split(';') %>%
lapply(str_split,',') %>%
lapply(lapply,as.numeric) %>%
lapply(list.rbind) %>% list.rbind %>%
gcj02_wgs84_matrix_df %>%
bind_cols(admin_city)
#行政区内所有下级单元行政区划边界
admin_city<-get_location('南京')[['districts']] %>% "["('districts') %>% '[['(1) %>% '[['(1)
admin_city<-lapply(admin_city$adcode,get_location)  %>%list.map(districts) %>% lapply(select,-districts) %>% list.rbind
View(admin_city)
View(admin_city)
#行政区内所有下级单元行政区划边界
admin_city<-get_location('025')[['districts']] %>% "["('districts') %>% '[['(1) %>% '[['(1)
admin_city<-lapply(admin_city$adcode,get_location)  %>%
list.map(districts) %>%
lapply(select,-districts)
View(admin_city)
admin_city<-lapply(admin_city$adcode,get_location)  %>%
list.map(districts) %>%
lapply(select,-districts) %>%
list.rbind
admin_city<-lapply(admin_city$adcode,get_location)  %>%
list.map(districts) %>%
lapply(select,-districts) %>%
list.rbind
#行政区内所有下级单元行政区划边界
admin_city<-get_location('025')[['districts']] %>% "["('districts') %>% '[['(1) %>% '[['(1)
admin_city<-lapply(admin_city$adcode,get_location)  %>%
list.map(districts) %>%
lapply(select,-districts) %>%
list.rbind
View(admin_city)
x<-admin_city$polyline[1]
View(admin_city)
polyline<-js_city$polyline %>%
str_split('\\|')
View(polyline)
polyline<-js_city$polyline %>%
str_split('\\|') %>%
lapply(str_split,';') %>%
lapply(lapply,str_split,',') %>%
lapply(lapply,lapply,as.numeric) %>%
lapply(lapply, list.rbind) %>%
lapply(lapply,gcj02_wgs84_matrix_matrix) %>%
lapply(lapply,list) %>%
lapply(st_multipolygon) %>%st_sfc(crs=4326)
polyline<-js_city$polyline %>%
str_split('\\|') %>%
lapply(str_split,';') %>%
lapply(lapply,str_split,',') %>%
lapply(lapply,lapply,as.numeric) %>%
lapply(lapply, list.rbind) %>%
lapply(lapply,gcj02_wgs84_matrix_matrix) %>%
lapply(lapply,list)
warnings()
#行政区内所有下级单元行政区划边界
admin<-get_location('025')
View(admin)
#单一行政区边界及中心
js<-get_location('江苏省')[['districts']]  %>% '['('districts') %>% '[['(1) %>% '[['(1)
#行政区内所有下级单元行政区划边界
admin<-get_location('025')[['districts']]  %>% '['('districts') %>% '[['(1) %>% '[['(1)
admin_city<-admin %>% "["('districts') %>% '[['(1) %>% '[['(1)  #提取各城市adcode
admin_city<-lapply(admin_city$adcode,get_location)  %>%         #利用lapply提取所有城市信息
list.map(districts) %>%
lapply(select,-districts) %>%
list.rbind
admin_city$polyline <- admin_city$polyline %>%
str_split('\\|') %>%
lapply(str_split,';') %>%
lapply(lapply,str_split,',') %>%
lapply(lapply,lapply,as.numeric) %>%
lapply(lapply,list.rbind) %>%
lapply(lapply,gcj02_wgs84_matrix_matrix) %>%
lapply(lapply,list) %>%
lapply(st_multipolygon) %>%st_sfc(crs=4326)
admin_city       <-admin_city$center %>%
str_split(';') %>%
lapply(str_split,',') %>%
lapply(lapply,as.numeric) %>%
lapply(list.rbind) %>% list.rbind %>%
gcj02_wgs84_matrix_df %>%
bind_cols(admin_city)
admin_city       <-admin_sf(js_city)
View(admin_city)
#行政区内所有下级单元行政区划边界
admin<-get_location('025')[['districts']]  %>% '['('districts') %>% '[['(1) %>% '[['(1)
#行政区内所有下级单元行政区划边界
admin<-get_location('025')[['districts']]  %>% '['('districts') %>% '[['(1) %>% '[['(1)
options(digits=11)
get_location<- function(address){
key = '7c6b6c0d1b641f4aa9cdb7d2229ae728'
url = 'http://restapi.amap.com/v3/config/district?' %>%
paste('keywords=' , address ,
'&key=' ,key ,
'&subdistrict=3' ,
'&extensions=all',
sep = '')
city<-GET(url)%>% content(as="text",encoding="UTF-8") %>% fromJSON(flatten = TRUE)
return(city)
}
#行政区内所有下级单元行政区划边界
admin<-get_location('025')[['districts']]  %>% '['('districts') %>% '[['(1) %>% '[['(1)
admin_city<-admin %>% "["('districts') %>% '[['(1) %>% '[['(1)  #提取各城市adcode
admin_city<-admin %>% "["('districts') %>% '[['(1)  #提取各城市adcode
#行政区内所有下级单元行政区划边界
admin<-get_location('025')[['districts']]
View(admin)
#单一行政区边界及中心
js<-get_location('江苏省')[['districts']]  %>% '['('districts') %>% '[['(1) %>% '[['(1)
#行政区内所有下级单元行政区划边界
admin<-get_location('025')[['districts']]
View(admin)
admin_city<-admin %>% "["('districts') %>% '[['(1)  #提取各城市adcode
#行政区内所有下级单元行政区划边界
admin<-get_location('025')[['districts']]
#行政区内所有下级单元行政区划边界
admin<-get_location('025')[['districts']]
admin_city<-admin %>% "["('districts') %>% '[['(1) %>% '[['(1)  #提取各城市adcode
admin_city<-lapply(admin_city$adcode,get_location)  %>%         #利用lapply提取所有城市信息
list.map(districts) %>%
lapply(select,-districts) %>%
list.rbind
admin_city$polyline <- admin_city$polyline %>%
str_split('\\|') %>%
lapply(str_split,';') %>%
lapply(lapply,str_split,',') %>%
lapply(lapply,lapply,as.numeric) %>%
lapply(lapply,list.rbind) %>%
lapply(lapply,gcj02_wgs84_matrix_matrix) %>%
lapply(lapply,list) %>%
lapply(st_multipolygon) %>%st_sfc(crs=4326)
admin_city       <-admin_city$center %>%
str_split(';') %>%
lapply(str_split,',') %>%
lapply(lapply,as.numeric) %>%
lapply(list.rbind) %>% list.rbind %>%
gcj02_wgs84_matrix_df %>%
bind_cols(admin_city)
admin_city       <-st_sf(admin_city)
ggplot()+geom_sf(data=admin_city)
saveRDS(admin_city,'nj_town.rds')
nj_poi<-read_rds('C:/Users/zhouq/Documents/R/map/20个城市的POI数据/POI数据整理城市/南京/CSV版本/nj_poi_sf.rds')
View(nj_poi)
ggplot()+geom_sf(data=admin_city) +geom_sf(nj_poi)
ggplot()+geom_sf(data=admin_city) +geom_sf(data=nj_poi)
ggplot()+geom_sf(data=admin_city) +geom_sf(data=nj_poi[which(nj_poi$大类=='餐饮服务')])
ggplot()+geom_sf(data=admin_city) +geom_sf(data=nj_poi[which(nj_poi$大类=='餐饮服务'),])
library(raster)
library(rgdal)
file<-system.file('lux.shp')
file<-system.file("external/lux.shp", package="raster")
file
file<-shapefile(file)
plot(file)
f <- system.file("external/rlogo.grd", package="raster")
f
r1<-raster(f)
plot(r1)
r1
b<-brick(f)
plot(b)
switch<-data.frame(type=0,number=0)
View(switch)
edit(switch)
switch<-data.frame(type="灯泡",number=0)
edit(switch)
switch$type<-as.character(switch$type)
library(flextable)
switch<-regulartable(switch)
View(switch)
switch
View(switch)
library("XML")
library(xml2)
library("stringr")
library("RCurl")
library("dplyr")
library("rvest")
library(sf)
library(jsonlite)
library(ggplot2)
library(httr)
library(rlist)
library('pipeR')
library(leaflet)
library(RColorBrewer)
#判断当前时间应提取哪一个时间点的舒适度指数表
time.diff<-function(){
start.time  <- as.POSIXlt(paste(Sys.Date(),'09:30:00 CST'))
diff        <- difftime(Sys.time(),start.time,units='mins') %>% as.data.frame.difftime() %>% as.numeric()
i           <- floor(diff/120)+1
if(i<1)    i<- 1
if(i>4)    i<- 4
return(i)
}
#提取当前时点的舒适度指数表
get.index<-function(){
date.url          <- paste('http://61.155.108.87/jslyzw/front/show/all_show.do?releasenyr=',Sys.Date(),'&releasedate=',sep = '')
time              <- c('9:30','11:30','13:30','15:30')
index.content     <- paste(date.url,time[time.diff()],sep='') %>%
getURL(.encoding="utf-8")  %>%
readHTMLTable(stringAsFactors = FALSE)
index.list        <- list.merge(index.content[[4]],index.content[[5]]) %>% lapply(as.character)
names(index.list) <- c("Tag",'Name',"Visitor",'index')
index.list$Visitor<- as.integer(index.list$Visitor)
index.list$index  <- substr(index.list$index,1,1) %>% factor(levels=c('5','4','3','2','1'),labels=c('舒适','较舒适','一般','较拥挤','拥挤'))
index.list$Tag    <- index.list$Tag %>% str_replace('发布时间：','') %>% strsplit('\\s')
return(index.list)
}
index.data          <- get.index()  %>% list.skip(1) %>% data.frame()
index.data$Name     <- as.character(index.data$Name)
index.data$Time     <- paste(index.list$Tag[[1]][1],index.list$Tag[[1]][2])
View(index.data)
#整理舒适度指数表
index.list          <-get.index()
index.data          <- get.index()  %>% list.skip(1) %>% data.frame()
index.data$Name     <- as.character(index.data$Name)
index.data$Time     <- paste(index.list$Tag[[1]][1],index.list$Tag[[1]][2])
keyword.list        <- index.data$Name %>% str_replace('（4A）|（5A）','') %>%str_replace('）','') %>% str_split('（')
View(keyword.list)
comfort_index<-function(){
library("XML")
library(xml2)
library("stringr")
library("RCurl")
library("dplyr")
library("rvest")
library(sf)
library(ggplot2)
library(jsonlite)
library(httr)
library(rlist)
library('pipeR')
library(leaflet)
library(RColorBrewer)
library(tidyverse)
setwd('~/GitHub/jingqu-comfort-index')
index.order        <- factor(c('1','2','3','4','5'),levels=c('拥挤','较拥挤','一般','较舒适','舒适'),ordered=TRUE)
#判断当前时间应提取哪一个时间点的舒适度指数表
time.diff<-function(){
start.time  <- as.POSIXlt(paste(Sys.Date(),'09:30:00 CST'))
diff        <- difftime(Sys.time(),start.time,units='mins') %>% as.data.frame.difftime() %>% as.numeric()
i           <- floor(diff/120)+1
if(i<1)    i<- 1
if(i>4)    i<- 4
return(i)
}
#提取当前时点的舒适度指数表
get.index<-function(){
date.url          <- paste('http://61.155.108.87/jslyzw/front/show/all_show.do?releasenyr=',Sys.Date(),'&releasedate=',sep = '')
time              <- c('9:30','11:30','13:30','15:30')
index.content     <- paste(date.url,time[time.diff()],sep='') %>%
getURL(.encoding="utf-8")  %>%
readHTMLTable(stringAsFactors = FALSE)
index.list        <- list.merge(index.content[[4]],index.content[[5]]) %>% lapply(as.character)
names(index.list) <- c("Tag",'Name',"Visitor",'index')
index.list$Visitor<- as.integer(index.list$Visitor)
index.list$index  <- substr(index.list$index,1,1) %>% factor(levels=c('5','4','3','2','1'),labels=c('舒适','较舒适','一般','较拥挤','拥挤'))
index.list$Tag    <- index.list$Tag %>% str_replace('发布时间：','') %>% strsplit('\\s')
return(index.list)
}
#整理舒适度指数表
index.list          <-get.index()
index.data          <- get.index()  %>% list.skip(1) %>% data.frame()
index.data$Name     <- as.character(index.data$Name)
index.data$Time     <- paste(index.list$Tag[[1]][1],index.list$Tag[[1]][2])
keyword.list        <- index.data$Name %>% str_replace('（4A）|（5A）','') %>%str_replace('）','') %>% str_split('（')
n<-sapply(keyword.list,length)
for(j in 1:length(keyword.list)){
if(n[j]>1)
index.data$keyword[j]<- keyword.list[[j]][2]
else
index.data$keyword[j]<- keyword.list[[j]][1]
}
jqgeo              <- read.csv('jqgeo2018_new_utf-8_rated.csv',stringsAsFactors = FALSE)[,c(5,6,7,8,9)]
index.data$keyword <- sapply(jqgeo$keyword,grep,index.data$keyword) %>% unlist() %>% sort() %>% names %>% as.character
index.data         <- merge(jqgeo,index.data,by='keyword',all=F)
pal                <- colorFactor(brewer.pal(11,'RdYlGn')[c(1,4,7,9,11)],domain = c('拥挤','较拥挤','一般','较舒适','舒适'),ordered=TRUE)
return(index.data)
}
index.data<-comfort_index()
install.packages('shiny')
comfort_index<-function(){
library("XML")
library(xml2)
library("stringr")
library("RCurl")
library("dplyr")
library("rvest")
library(sf)
library(ggplot2)
library(jsonlite)
library(httr)
library(rlist)
library('pipeR')
library(leaflet)
library(RColorBrewer)
library(tidyverse)
setwd('~/GitHub/jingqu-comfort-index')
index.order        <- factor(c('1','2','3','4','5'),levels=c('拥挤','较拥挤','一般','较舒适','舒适'),ordered=TRUE)
#判断当前时间应提取哪一个时间点的舒适度指数表
time.diff<-function(){
start.time  <- as.POSIXlt(paste(Sys.Date(),'09:30:00 CST'))
diff        <- difftime(Sys.time(),start.time,units='mins') %>% as.data.frame.difftime() %>% as.numeric()
i           <- floor(diff/120)+1
if(i<1)    i<- 1
if(i>4)    i<- 4
return(i)
}
#提取当前时点的舒适度指数表
get.index<-function(){
date.url          <- paste('http://61.155.108.87/jslyzw/front/show/all_show.do?releasenyr=',Sys.Date(),'&releasedate=',sep = '')
time              <- c('9:30','11:30','13:30','15:30')
index.content     <- paste(date.url,time[time.diff()],sep='') %>%
getURL(.encoding="utf-8")  %>%
readHTMLTable(stringAsFactors = FALSE)
index.list        <- list.merge(index.content[[4]],index.content[[5]]) %>% lapply(as.character)
names(index.list) <- c("Tag",'Name',"Visitor",'index')
index.list$Visitor<- as.integer(index.list$Visitor)
index.list$index  <- substr(index.list$index,1,1) %>% factor(levels=c('5','4','3','2','1'),labels=c('舒适','较舒适','一般','较拥挤','拥挤'))
index.list$Tag    <- index.list$Tag %>% str_replace('发布时间：','') %>% strsplit('\\s')
return(index.list)
}
#整理舒适度指数表
index.list          <-get.index()
index.data          <- get.index()  %>% list.skip(1) %>% data.frame()
index.data$Name     <- as.character(index.data$Name)
index.data$Time     <- paste(index.list$Tag[[1]][1],index.list$Tag[[1]][2])
keyword.list        <- index.data$Name %>% str_replace('（4A）|（5A）','') %>%str_replace('）','') %>% str_split('（')
n<-sapply(keyword.list,length)
for(j in 1:length(keyword.list)){
if(n[j]>1)
index.data$keyword[j]<- keyword.list[[j]][2]
else
index.data$keyword[j]<- keyword.list[[j]][1]
}
jqgeo              <- read.csv('jqgeo2018_new_utf-8_rated.csv',stringsAsFactors = FALSE)[,c(5,6,7,8,9)]
index.data$keyword <- sapply(jqgeo$keyword,grep,index.data$keyword) %>% unlist() %>% sort() %>% names %>% as.character
index.data         <- merge(jqgeo,index.data,by='keyword',all=F)
pal                <- colorFactor(brewer.pal(11,'RdYlGn')[c(1,4,7,9,11)],domain = c('拥挤','较拥挤','一般','较舒适','舒适'),ordered=TRUE)
return(index.data)
}
index.data<-comfort_index()
install.packages('leaflet')
comfort_index<-function(){
library("XML")
library(xml2)
library("stringr")
library("RCurl")
library("dplyr")
library("rvest")
library(sf)
library(ggplot2)
library(jsonlite)
library(httr)
library(rlist)
library('pipeR')
library('leaflet')
library(RColorBrewer)
library(tidyverse)
setwd('~/GitHub/jingqu-comfort-index')
index.order        <- factor(c('1','2','3','4','5'),levels=c('拥挤','较拥挤','一般','较舒适','舒适'),ordered=TRUE)
#判断当前时间应提取哪一个时间点的舒适度指数表
time.diff<-function(){
start.time  <- as.POSIXlt(paste(Sys.Date(),'09:30:00 CST'))
diff        <- difftime(Sys.time(),start.time,units='mins') %>% as.data.frame.difftime() %>% as.numeric()
i           <- floor(diff/120)+1
if(i<1)    i<- 1
if(i>4)    i<- 4
return(i)
}
#提取当前时点的舒适度指数表
get.index<-function(){
date.url          <- paste('http://61.155.108.87/jslyzw/front/show/all_show.do?releasenyr=',Sys.Date(),'&releasedate=',sep = '')
time              <- c('9:30','11:30','13:30','15:30')
index.content     <- paste(date.url,time[time.diff()],sep='') %>%
getURL(.encoding="utf-8")  %>%
readHTMLTable(stringAsFactors = FALSE)
index.list        <- list.merge(index.content[[4]],index.content[[5]]) %>% lapply(as.character)
names(index.list) <- c("Tag",'Name',"Visitor",'index')
index.list$Visitor<- as.integer(index.list$Visitor)
index.list$index  <- substr(index.list$index,1,1) %>% factor(levels=c('5','4','3','2','1'),labels=c('舒适','较舒适','一般','较拥挤','拥挤'))
index.list$Tag    <- index.list$Tag %>% str_replace('发布时间：','') %>% strsplit('\\s')
return(index.list)
}
#整理舒适度指数表
index.list          <-get.index()
index.data          <- get.index()  %>% list.skip(1) %>% data.frame()
index.data$Name     <- as.character(index.data$Name)
index.data$Time     <- paste(index.list$Tag[[1]][1],index.list$Tag[[1]][2])
keyword.list        <- index.data$Name %>% str_replace('（4A）|（5A）','') %>%str_replace('）','') %>% str_split('（')
n<-sapply(keyword.list,length)
for(j in 1:length(keyword.list)){
if(n[j]>1)
index.data$keyword[j]<- keyword.list[[j]][2]
else
index.data$keyword[j]<- keyword.list[[j]][1]
}
jqgeo              <- read.csv('jqgeo2018_new_utf-8_rated.csv',stringsAsFactors = FALSE)[,c(5,6,7,8,9)]
index.data$keyword <- sapply(jqgeo$keyword,grep,index.data$keyword) %>% unlist() %>% sort() %>% names %>% as.character
index.data         <- merge(jqgeo,index.data,by='keyword',all=F)
pal                <- colorFactor(brewer.pal(11,'RdYlGn')[c(1,4,7,9,11)],domain = c('拥挤','较拥挤','一般','较舒适','舒适'),ordered=TRUE)
return(index.data)
}
index.data<-comfort_index()
shiny::runApp('GitHub/jingqu-comfort-index/shiny/江苏省重点旅游景区舒适度指数查询')
library(shiny)
install.packages('shiny')
shiny::runApp('GitHub/jingqu-comfort-index/shiny/dsd')
shiny::runApp('GitHub/jingqu-comfort-index/shiny/dsd')
install.packages(c("bindrcpp", "blob", "broom", "caret", "config", "curl", "deldir", "ggthemes", "gstat", "lava", "lmtest", "lubridate", "mapproj", "maps", "plogr", "psych", "rasterVis", "ReporteRs", "ReporteRsjars", "RSQLite", "selectr", "sf", "spam", "spData", "spdep", "viridis"))
library(shiny)
install.packages('httpuv')
install.packages("httpuv")
library(shiny)
runApp('GitHub/jingqu-comfort-index/shiny/sd')
comfort_index<-function(){
library("XML")
library(xml2)
library("stringr")
library("RCurl")
library("dplyr")
library("rvest")
library(sf)
library(ggplot2)
library(jsonlite)
library(httr)
library(rlist)
library('pipeR')
library('leaflet')
library(RColorBrewer)
library(tidyverse)
setwd('~/GitHub/jingqu-comfort-index')
index.order        <- factor(c('1','2','3','4','5'),levels=c('拥挤','较拥挤','一般','较舒适','舒适'),ordered=TRUE)
#判断当前时间应提取哪一个时间点的舒适度指数表
time.diff<-function(){
start.time  <- as.POSIXlt(paste(Sys.Date(),'09:30:00 CST'))
diff        <- difftime(Sys.time(),start.time,units='mins') %>% as.data.frame.difftime() %>% as.numeric()
i           <- floor(diff/120)+1
if(i<1)    i<- 1
if(i>4)    i<- 4
return(i)
}
#提取当前时点的舒适度指数表
get.index<-function(){
date.url          <- paste('http://61.155.108.87/jslyzw/front/show/all_show.do?releasenyr=',Sys.Date(),'&releasedate=',sep = '')
time              <- c('9:30','11:30','13:30','15:30')
index.content     <- paste(date.url,time[time.diff()],sep='') %>%
getURL(.encoding="utf-8")  %>%
readHTMLTable(stringAsFactors = FALSE)
index.list        <- list.merge(index.content[[4]],index.content[[5]]) %>% lapply(as.character)
names(index.list) <- c("Tag",'Name',"Visitor",'index')
index.list$Visitor<- as.integer(index.list$Visitor)
index.list$index  <- substr(index.list$index,1,1) %>% factor(levels=c('5','4','3','2','1'),labels=c('舒适','较舒适','一般','较拥挤','拥挤'))
index.list$Tag    <- index.list$Tag %>% str_replace('发布时间：','') %>% strsplit('\\s')
return(index.list)
}
#整理舒适度指数表
index.list          <-get.index()
index.data          <- get.index()  %>% list.skip(1) %>% data.frame()
index.data$Name     <- as.character(index.data$Name)
index.data$Time     <- paste(index.list$Tag[[1]][1],index.list$Tag[[1]][2])
keyword.list        <- index.data$Name %>% str_replace('（4A）|（5A）','') %>%str_replace('）','') %>% str_split('（')
n<-sapply(keyword.list,length)
for(j in 1:length(keyword.list)){
if(n[j]>1)
index.data$keyword[j]<- keyword.list[[j]][2]
else
index.data$keyword[j]<- keyword.list[[j]][1]
}
jqgeo              <- read.csv('jqgeo2018_new_utf-8_rated.csv',stringsAsFactors = FALSE)[,c(5,6,7,8,9)]
index.data$keyword <- sapply(jqgeo$keyword,grep,index.data$keyword) %>% unlist() %>% sort() %>% names %>% as.character
index.data         <- merge(jqgeo,index.data,by='keyword',all=F)
pal                <- colorFactor(brewer.pal(11,'RdYlGn')[c(1,4,7,9,11)],domain = c('拥挤','较拥挤','一般','较舒适','舒适'),ordered=TRUE)
return(index.data)
}
index.data<-comfort_index()
p                  <- leaflet(index.data) %>%
addTiles(
'http://webrd0{s}.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=8&x={x}&y={y}&z={z}',
options=tileOptions(tileSize=256, minZoom=7, maxZoom=17, subdomains="1234"),
attribution = '&copy; <a href="http://ditu.amap.com/">高德地图</a>',
group="Road Map") %>%
setView(index.data$lng[1],index.data$lat[1] ,zoom = 10)%>%
addCircles(color=~pal(index.data$index),weight=25,popup=paste(index.data$Name.y,"<br/>",'人数:',index.data$Visitor,"<br/>",index.data$index,sep=''))%>%
addLegend("bottomleft",pal=pal,values=~index,title=paste(index.data$Time[1],'江苏重点旅游景区舒适度'))
library(RColorBrewer)
pal                <- colorFactor(brewer.pal(11,'RdYlGn')[c(1,4,7,9,11)],domain = c('拥挤','较拥挤','一般','较舒适','舒适'),ordered=TRUE)
pal                <- colorFactor(brewer.pal(11,'RdYlGn')[c(1,4,7,9,11)],
domain = c('拥挤','较拥挤','一般','较舒适','舒适'),ordered=TRUE)
p                  <- leaflet(index.data) %>%
addTiles(
'http://webrd0{s}.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=8&x={x}&y={y}&z={z}',
options=tileOptions(tileSize=256, minZoom=7, maxZoom=17, subdomains="1234"),
attribution = '&copy; <a href="http://ditu.amap.com/">高德地图</a>',
group="Road Map") %>%
setView(index.data$lng[1],index.data$lat[1] ,zoom = 10)%>%
addCircles(color=~pal(index.data$index),weight=25,popup=paste(index.data$Name.y,"<br/>",'人数:',index.data$Visitor,"<br/>",index.data$index,sep=''))%>%
addLegend("bottomleft",pal=pal,values=~index,title=paste(index.data$Time[1],'江苏重点旅游景区舒适度'))
p
